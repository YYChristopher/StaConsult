s.hat[i] <- sum(y * a/sum(a))
}
return(s.hat)
}
NWsmooth.val1 <- NWSMOOTH(h, y, x)
par(mfrow=c(2,2))
plot(x, y, xlab = "Predictor", ylab = "Response", col = 1,main = "ethanol取h=0.015(NW核)")
lines(x, NWsmooth.val1, col = 2)
h <- 0.025
NWsmooth.val2 <- NWSMOOTH(h, y, x)
plot(x, y, xlab = "Predictor", ylab = "Response", col = 1,main = "ethanol取h=0.025(NW核)")
lines(x, NWsmooth.val2, col = 3)
h <- 0.05
NWsmooth.val3 <- NWSMOOTH(h, y, x)
plot(x, y, xlab = "Predictor", ylab = "Response", col = 1,main = "ethanol取h=0.05(NW核)")
lines(x, NWsmooth.val3, col = 4)
h <- 0.1
NWsmooth.val4 <- NWSMOOTH(h, y, x)
plot(x, y, xlab = "Predictor", ylab = "Response", col = 1,main = "ethanol取h=0.1(NW核)")
lines(x, NWsmooth.val4, col = 5)
?Reduce
Reduce('+',.)
add <- function(x) Reduce("+", x)
add(list(1, 2, 3))
s <- read.table('D:\\Rsoftware\\R软件习题数据\\exercise2_10.txt')
S <- as.matrix(s)
X <- as.matrix(s[,2:4])
Y <- as.vector(s[,5])
lambda <- 0.1
m <- dim(S)[1]
p <- dim(S)[2]-1
one <- rep(1,times=m)
X <- cbind(one,X)
N <- rep(0,times=m)
W <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
Z <- rep(0,times=m)
D <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
for(i in 1:m){
Z[i] <- log((Y[i]+0.5)/(1.5-Y[i]))
D[i,i] <- 6/((Y[i]+1)*(2-Y[i]))
}
b_old <- solve(t(X)%*%(solve(D))%*%X)%*%t(X)%*%solve(D)%*%Z
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)-lambda
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
epsilon <- 0.01
b_minus <- b_new-b_old
iter <- 1
while(t(b_minus)%*%b_minus>=epsilon){
b_old <- b_new
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)-lambda
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
b_minus <- b_new-b_old
iter <- iter+1
}
b_new
s <- read.table('D:\\Rsoftware\\R软件习题数据\\exercise2_10.txt')
S <- as.matrix(s)
X <- as.matrix(s[,2:4])
Y <- as.vector(s[,5])
m <- dim(S)[1]
p <- dim(S)[2]-1
one <- rep(1,times=m)
X <- cbind(one,X)
N <- rep(0,times=m)
W <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
Z <- rep(0,times=m)
D <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
for(i in 1:m){
Z[i] <- log((Y[i]+0.5)/(1.5-Y[i]))
D[i,i] <- 6/((Y[i]+1)*(2-Y[i]))
}
b_old <- solve(t(X)%*%(solve(D))%*%X)%*%t(X)%*%solve(D)%*%Z
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
epsilon <- 0.01
b_minus <- b_new-b_old
iter <- 1
while(t(b_minus)%*%b_minus>=epsilon){
b_old <- b_new
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
b_minus <- b_new-b_old
iter <- iter+1
}
b_new
s <- read.table('D:\\Rsoftware\\R软件习题数据\\exercise2_10.txt')
S <- as.matrix(s)
X <- as.matrix(s[,2:4])
Y <- as.vector(s[,5])
lambda <- 0.01
m <- dim(S)[1]
p <- dim(S)[2]-1
one <- rep(1,times=m)
X <- cbind(one,X)
N <- rep(0,times=m)
W <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
Z <- rep(0,times=m)
D <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
for(i in 1:m){
Z[i] <- log((Y[i]+0.5)/(1.5-Y[i]))
D[i,i] <- 6/((Y[i]+1)*(2-Y[i]))
}
b_old <- solve(t(X)%*%(solve(D))%*%X)%*%t(X)%*%solve(D)%*%Z
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)-lambda
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
epsilon <- 0.01
b_minus <- b_new-b_old
iter <- 1
while(t(b_minus)%*%b_minus>=epsilon){
b_old <- b_new
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)-lambda
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
b_minus <- b_new-b_old
iter <- iter+1
}
b_new
s <- read.table('D:\\Rsoftware\\R软件习题数据\\exercise2_10.txt')
S <- as.matrix(s)
X <- as.matrix(s[,2:4])
Y <- as.vector(s[,5])
lambda <- 0.001
m <- dim(S)[1]
p <- dim(S)[2]-1
one <- rep(1,times=m)
X <- cbind(one,X)
N <- rep(0,times=m)
W <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
Z <- rep(0,times=m)
D <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
for(i in 1:m){
Z[i] <- log((Y[i]+0.5)/(1.5-Y[i]))
D[i,i] <- 6/((Y[i]+1)*(2-Y[i]))
}
b_old <- solve(t(X)%*%(solve(D))%*%X)%*%t(X)%*%solve(D)%*%Z
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)-lambda
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
epsilon <- 0.01
b_minus <- b_new-b_old
iter <- 1
while(t(b_minus)%*%b_minus>=epsilon){
b_old <- b_new
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)-lambda
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
b_minus <- b_new-b_old
iter <- iter+1
}
b_new
s <- read.table('D:\\Rsoftware\\R软件习题数据\\exercise2_10.txt')
S <- as.matrix(s)
X <- as.matrix(s[,2:4])
Y <- as.vector(s[,5])
lambda <- 0.005
m <- dim(S)[1]
p <- dim(S)[2]-1
one <- rep(1,times=m)
X <- cbind(one,X)
N <- rep(0,times=m)
W <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
Z <- rep(0,times=m)
D <- matrix(data=0,nrow = m,ncol = m,byrow = FALSE,dimnames = NULL)
for(i in 1:m){
Z[i] <- log((Y[i]+0.5)/(1.5-Y[i]))
D[i,i] <- 6/((Y[i]+1)*(2-Y[i]))
}
b_old <- solve(t(X)%*%(solve(D))%*%X)%*%t(X)%*%solve(D)%*%Z
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)-lambda
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
epsilon <- 0.01
b_minus <- b_new-b_old
iter <- 1
while(t(b_minus)%*%b_minus>=epsilon){
b_old <- b_new
for(i in 1:m){
ex <- exp(X[i,]%*%b_old)
N[i] <- ex/(1+ex)-lambda
W[i,i] <- ex/((1+ex)^2)
}
b_new <- b_old+solve((t(X)%*%W%*%X))%*%t(X)%*%(Y-N)
b_minus <- b_new-b_old
iter <- iter+1
}
b_new
library(mvtnorm)                             #加载需要的包
library(rvest)
n=200;p=10;rho=0.5                           #x是200*11维的矩阵，rho是x的相关矩阵中的值
beta_o <- c(1,1,2,1,4,3,6,1,-1,-2,-3)        #系数beta的真值
e <- 1e-5                                    #残差阈值
sigma <- matrix(0,nrow = 10,ncol = 10)       #产生x时的协方差阵
for(i in 1:10){
for(j in 1:10){
sigma[i,j] <- rho^(abs(i-j))
}
}                                            #形成协方差矩阵sigma
#此函数用来求似然函数，是关于beta的函数，一个beta对应一个似然值,不同的lambda对应不同的惩罚
loglike <- function(beta,lambda,X,Y){
loglike <- lapply(1:n,function(i){Y[i]*sum(beta*X[i,])-
log(1+exp(sum(beta*X[i,])))})%>%Reduce('+',.)-lambda*sum(abs(beta))
return(loglike)
}
#此函数用来改变beta的值，输入原始beta，以及想改变哪一列，输出改变后的beta的值
Cha_beta <- function(j,beta_o,lambda,X,Y){             #j代表想改变哪一列
#此函数用来求p(xi,beta)
prob_fun <- function(i){
p_i <- exp(sum(beta_o*X[i,]))/(1+exp(sum(beta_o*X[i,])))
return(p_i)
}
#加惩罚项的似然函数对beta_j的一阶导数
fst_dj <- lapply(1:n,function(i) X[i,j]*(Y[i]-prob_fun(i)))%>%Reduce('+',.)-lambda
#加惩罚项的nnn似然函数对beta_j的二阶导数
scd_djj <- -c(lapply(1:n,function(i){X[i,j]*X[i,j]*prob_fun(i)*(1-prob_fun(i))})%>%Reduce('+',.))
#改变第β的第j个数值
a <- beta_o[j]-(1/scd_djj)*fst_dj
return(a)
}
#将估计β的过程封装成一个函数，每次产生不同的数据来估计β，并重复此过程
Get_b_logitlasso <-function() {
x <- rmvnorm(n,mean = rep(0,p),sigma = sigma)#产生x
X <- cbind(rep(1,n),x)                       #最终的X，加上截距项
Get_Y <- function(i){
prob <- exp(sum(beta_o*X[i,]))/(1+exp(sum(beta_o*X[i,])))
y <- rbinom(1,1,prob = prob)               #Y是伯努利分布
return(y)
}
Y <- lapply(1:n,Get_Y)%>%Reduce(rbind,.)    #产生Y
#inter <- 0                                 #迭代次数初始值
diff_loglike <- 100000                      #似然函数的差值
beta_original <- c(rep(0,(p+1)))            #beta的初始值
lambda=0.01
while(diff_loglike>=e){
for(j in 1:(p+1)){
log1 <- loglike(beta_original,lambda,X,Y) #更新之前的似然函数的值
beta_original[j] <- Cha_beta(j,beta_original,lambda,X,Y)#对β进行更新
log2 <- loglike(beta_original,lambda,X,Y) #更新后的似然函数值
diff_loglike <- abs(log2-log1)/abs(log1)  #似然函数的差
if(diff_loglike<e){break}
#inter=inter+1
}
}
return(data.frame(beta_estimate=beta_original))
}
beta <- lapply(1:200,Get_b_logitlasso)%>%Reduce(cbind,.)  #重复上述过程200次
colMeans(beta)                                            #取其平均作为β的估计值
beta_hat=(0.76,0.76,1.38,0.88,2.82,2.43,4.33,0.74,-0.93,-1.54,-2.01)
library(mvtnorm)                             #加载需要的包
library(rvest)
n=200;p=10;rho=0.5                           #x是200*11维的矩阵，rho是x的相关矩阵中的值
beta_o <- c(1,1,2,1,4,3,6,1,-1,-2,-3)        #系数beta的真值
e <- 1e-5                                    #残差阈值
sigma <- matrix(0,nrow = 10,ncol = 10)       #产生x时的协方差阵
for(i in 1:10){
for(j in 1:10){
sigma[i,j] <- rho^(abs(i-j))
}
}                                            #形成协方差矩阵sigma
#此函数用来求似然函数，是关于beta的函数，一个beta对应一个似然值,不同的lambda对应不同的惩罚
loglike <- function(beta,lambda,X,Y){
loglike <- lapply(1:n,function(i){Y[i]*sum(beta*X[i,])-
log(1+exp(sum(beta*X[i,])))})%>%Reduce('+',.)-lambda*sum(abs(beta))
return(loglike)
}
#此函数用来改变beta的值，输入原始beta，以及想改变哪一列，输出改变后的beta的值
Cha_beta <- function(j,beta_o,lambda,X,Y){             #j代表想改变哪一列
#此函数用来求p(xi,beta)
prob_fun <- function(i){
p_i <- exp(sum(beta_o*X[i,]))/(1+exp(sum(beta_o*X[i,])))
return(p_i)
}
#加惩罚项的似然函数对beta_j的一阶导数
fst_dj <- lapply(1:n,function(i) X[i,j]*(Y[i]-prob_fun(i)))%>%Reduce('+',.)-lambda
#加惩罚项的nnn似然函数对beta_j的二阶导数
scd_djj <- -c(lapply(1:n,function(i){X[i,j]*X[i,j]*prob_fun(i)*(1-prob_fun(i))})%>%Reduce('+',.))
#改变第β的第j个数值
a <- beta_o[j]-(1/scd_djj)*fst_dj
return(a)
}
#将估计β的过程封装成一个函数，每次产生不同的数据来估计β，并重复此过程
Get_b_logitlasso <-function() {
x <- rmvnorm(n,mean = rep(0,p),sigma = sigma)#产生x
X <- cbind(rep(1,n),x)                       #最终的X，加上截距项
Get_Y <- function(i){
prob <- exp(sum(beta_o*X[i,]))/(1+exp(sum(beta_o*X[i,])))
y <- rbinom(1,1,prob = prob)               #Y是伯努利分布
return(y)
}
Y <- lapply(1:n,Get_Y)%>%Reduce(rbind,.)    #产生Y
#inter <- 0                                 #迭代次数初始值
diff_loglike <- 100000                      #似然函数的差值
beta_original <- c(rep(0,(p+1)))            #beta的初始值
lambda=0.01
while(diff_loglike>=e){
for(j in 1:(p+1)){
log1 <- loglike(beta_original,lambda,X,Y) #更新之前的似然函数的值
beta_original[j] <- Cha_beta(j,beta_original,lambda,X,Y)#对β进行更新
log2 <- loglike(beta_original,lambda,X,Y) #更新后的似然函数值
diff_loglike <- abs(log2-log1)/abs(log1)  #似然函数的差
if(diff_loglike<e){break}
#inter=inter+1
}
}
return(data.frame(beta_estimate=beta_original))
}
beta <- lapply(1:200,Get_b_logitlasso)%>%Reduce(cbind,.)  #重复上述过程200次
colMeans(beta)                                            #取其平均作为β的估计值
beta_hat=(0.76,0.76,1.38,0.88,2.82,2.43,4.33,0.74,-0.93,-1.54,-2.01)
m <- 20000##样本链长度
xt <- numeric(m)
a <- 1
b <- 1##建议分布Beta(a,b)的参数
p <- 0.9##混合权重
n <- 300##样本量
mu <- c(0,5)
sigma <- c(1,1)##正态分布参数，用来形成混合分布
##生成观察值
i <- sample(1:2,size = n,replace = TRUE,prob = c(p,1-p))
x <- rnorm(n,mu[i],sigma[i])
##生成独立样本链
u <- runif(m)
y <- rbeta(m,a,b)##形成建议分布的抽样
xt[1] <- 0.5
for(i in 2:m){
fy <- y[i]*dnorm(x,mu[1],sigma[1])+(1-y[i])*dnorm(x,mu[2],sigma[2])
fx <- xt[i-1]*dnorm(x,mu[1],sigma[1])+(1-xt[i-1])*dnorm(x,mu[2],sigma[2])
r <- prod(fy/fx)*(xt[i-1]^(a-1)*(1-xt[i-1])^(b-1))/(y[i]^(a-1)*(1-y[i])^(b-1))
if(u[i]<=r)
xt[i] <- y[i]
else
xt[i] <- xt[i-1]
}
plot(xt,type = "l",ylab = "p")
hist(xt[1001:m],main = "",xlab = "p",prob = TRUE)
print(mean(xt[1001:m]))
m <- 20000##样本链长度
xt <- numeric(m)
a <- 1
b <- 1##建议分布Beta(a,b)的参数
p <- 0.2##混合权重
n <- 300##样本量
mu <- c(0,5)
sigma <- c(1,1)##正态分布参数，用来形成混合分布
##生成观察值
i <- sample(1:2,size = n,replace = TRUE,prob = c(p,1-p))
x <- rnorm(n,mu[i],sigma[i])
##生成独立样本链
u <- runif(m)
y <- rbeta(m,a,b)##形成建议分布的抽样
xt[1] <- 0.5
for(i in 2:m){
fy <- y[i]*dnorm(x,mu[1],sigma[1])+(1-y[i])*dnorm(x,mu[2],sigma[2])
fx <- xt[i-1]*dnorm(x,mu[1],sigma[1])+(1-xt[i-1])*dnorm(x,mu[2],sigma[2])
r <- prod(fy/fx)*(xt[i-1]^(a-1)*(1-xt[i-1])^(b-1))/(y[i]^(a-1)*(1-y[i])^(b-1))
if(u[i]<=r)
xt[i] <- y[i]
else
xt[i] <- xt[i-1]
}
plot(xt,type = "l",ylab = "p")
hist(xt[1001:m],main = "",xlab = "p",prob = TRUE)
print(mean(xt[1001:m]))
library(bsts)
path="C:\\Users\\user\\Documents\\统计实践与高维\\统计咨询与实践\\大报告\\code"
setwd(path)
source("Makeplots函数.R")
#数据导入
data<-read.csv("D:/Rsoftware/时间序列与金融统计/非线性模型作业/data/S&P.csv")
d<-ts(data,frequency = 53,start = c(2016))
#数据处理
#figure1:导入收盘价数据
plot(d[,5])
x <- d[1:225,5]
ss2 <- AddSemilocalLinearTrend(list(), x)
model2 <- bsts(x, state.specification = ss2, niter = 500)
pred2 <- predict(model2, horizon = 12, burn = 100)
plot(model2)
plot(pred2)
plot(model2, "state",main = "state")
plot(model2, "components",main = "components")
plot(model2, "residuals",main = "residuals")
plot(model2, "prediction.errors",main = "prediction errors")
plot(model2, "forecast.distribution",main = "forecast distribution")
#MakePlots(model2)
pred2$mean
d[226:238,5]
library(bsts)
path="C:\\Users\\user\\Documents\\统计实践与高维\\统计咨询与实践\\大报告\\code"
setwd(path)
source("Makeplots函数.R")
#数据导入
S <- read.table("D:/时间序列与金融统计/线性模型作业与报告/BP500.txt")
dataold <- c(S)
data <- c(S)
dataold <- as.data.frame(lapply(dataold,as.numeric))
data <- as.data.frame(lapply(data,as.numeric))
data[55,1] <- (data[54,1]+data[56,1])/2
data[212,1] <- (data[211,1]+data[213,1])/2
data[342,1] <- (data[341,1]+data[343,1])/2
data[464,1] <- (data[463,1]+data[465,1])/2
data[601,1] <- (data[600,1]+data[602,1])/2
d <- ts(dataold,frequency = 12,start=c(1970,3))
#数据处理
#figure1:导入收盘价数据
plot(d,col="red",xlab="时间",ylab = "对数收益率")
abline(h=0,col="blue")
#figure2:转对数收益率
logd<-diff(log(d[,5]))
plot(logd,col="red",xlab="时间",ylab="对数收益率")
abline(h=0,col="blue")
title("BP500对数收益率(未经异常值处理)随时间序列分布")
m <- ts(data,frequency = 12,start=c(1970,3))
plot(m,col="red",xlab="时间",ylab = "对数收益率")
abline(h=0,col="blue")
title("BP500对数收益率(经异常值处理)随时间序列分布")
y <- m
ss <- AddLocalLinearTrend(list(), y)
ss <- AddSeasonal(ss, y, nseasons = 12)
model <- bsts(y, state.specification = ss, niter = 500)
pred <- predict(model, horizon = 12, burn = 100)
plot(model)
plot(pred)
MakePlots(model)
data<-read.csv("D:/Rsoftware/时间序列与金融统计/非线性模型作业/data/S&P.csv")
d<-ts(data,frequency = 53,start = c(2016))
#数据处理
#figure1:导入收盘价数据
plot(d[,5])
x <- d[,5]
#figure2:转对数收益率
logd<-diff(log(d[,5]))
plot(logd,col="red",xlab="时间",ylab="对数收益率")
y_ori <- logd
y <- y_ori[1:220]
ss <- AddLocalLinearTrend(list(), y)
model <- bsts(y, state.specification = ss, niter = 500)
pred <- predict(model, horizon = 12, burn = 100)
plot(model)
plot(pred)
plot(model, "state",main = "state")
plot(model, "components",main = "components")
plot(model, "residuals",main = "residuals")
plot(model, "prediction.errors",main = "prediction errors")
plot(model, "forecast.distribution",main = "forecast distribution")
#MakePlots(model)
data(goog)
d<-ts(goog,frequency = 260,start = c(2007))
y_ori <- d
ss <- AddSemilocalLinearTrend(list(), d)
model <- bsts(goog, state.specification = ss, niter = 500)
pred <- predict(model, horizon = 12, burn = 100)
y_range <- as.vector(seq(from = 800, to=1000, by = 1))
pre_error1 <- rep(0,length(y_range))
pre_error2 <- rep(0,length(y_range))
for(i in y_range){
y <- y_ori[1:i]
ss <- AddLocalLinearTrend(list(), y)
model <- bsts(y, state.specification = ss, niter = 500)
pred <- predict(model, horizon = 12, burn = 100)
error <- dist(rbind(pred$mean,y_ori[i+1:i+12]),method = "euclidean")/12
pre_error1[i-799] <- error
}
pre_error1
for(i in y_range){
y <- y_ori[1:i]
pre <- forecast(y,12)
error <- dist(rbind(pre$mean,y_ori[i+1:i+12]),method = "euclidean")/12
pre_error2[i-799] <- error
}
pre_error2
plot(y_range,pre_error1,xlab="时间变动范围",ylab="horizon=12预测误差",col="red",type="l")
lines(y_range,pre_error2,xlab="时间变动范围",ylab="horizon=12预测误差",col="blue",type="l")
data(AirPassengers)
x <- data(AirPassengers)
x
Time series (ts) data
data(AirPassengers)
data(AirPassengers)
y_ori <- log(AirPassengers)
y_ori
