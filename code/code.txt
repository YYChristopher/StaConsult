Gibbs抽样一维正态分布：


y <- rnorm(100,mean = 100,sd=0.1)
bary <- mean(y)
iterations <- 50000
mu_0 <- 0
s_0 <- 100
a_0 <- 0.001
b_0 <- 0.001
theta <- matrix(nrow = iterations,ncol = 2)
cur.mu <- 0
cur.tau <- 4
cur.s <- sqrt(1/cur.tau)
for(t in 1:iterations){
  w <- s_0^2/(cur.s^2/n+s_0^2)
  m <- w*bary+(1-w)*mu_0
  s <- sqrt(w/n)*cur.s
  cur.mu <- rnorm(1,m,s)
  a <- a_0+0.5*n
  b <- b_0+0.5*sum((y-cur.mu)^2)
  cur.tau <- rgamma(1,a,b)
  cur.s <- sqrt(1/cur.tau)
  theta[t,] <- c(cur.mu,cur.s)
}
plot(c(1:iterations),theta[,1],xlab = "迭代次数",ylab = "均值迭代结果",type="l")
plot(c(1:iterations),theta[,2],xlab = "迭代次数",ylab = "标准差迭代结果",type="l")
mean(theta[,1])
mean(theta[,2])



Gibbs抽样一维影响因素：


sdq <- seq(from=0.1,to = 10,by= 0.1)
meanres <- rep(0,length(sdq))
sdres <- rep(0,length(sdq))
meanmse <- rep(0,length(sdq))
sdmse <- rep(0,length(sdq))
M <- 100

for(i in 1:length(sdq)){
  y <- rnorm(100,mean = 100,sd=sdq[i])
  bary <- mean(y)
  iterations <- 10000
  mu_0 <- 0
  s_0 <- 10
  a_0 <- 0.001
  b_0 <- 0.001
  theta <- matrix(nrow = iterations,ncol = 2)
  cur.mu <- 0
  cur.tau <- 2
  cur.s <- sqrt(1/cur.tau)
  for(t in 1:iterations){
    w <- s_0^2/(cur.s^2/n+s_0^2)
    m <- w*bary+(1-w)*mu_0
    s <- sqrt(w/n)*cur.s
    cur.mu <- rnorm(1,m,s)
    a <- a_0+0.5*n
    b <- b_0+0.5*sum((y-cur.mu)^2)
    cur.tau <- rgamma(1,a,b)
    cur.s <- sqrt(1/cur.tau)
    theta[t,] <- c(cur.mu,cur.s)
  }
  meanres[i] <- mean(theta[,1])
  sdres[i] <- mean(theta[,2])
}

for(j in 1:length(meanres)){
  meanmse[j] <- (meanres[j]-M)^2
  sdmse[j] <- (sdres[j]-sdq[j])^2
}

plot(sdq,sdmse,col=2,type = "l")
plot(sdq,meanmse,col=2,type = "l")



Gibbs抽样二维正态分布：


N <- 5000
burn <- 1000
X <- matrix(0,N,2)
rho <- -.75
mu1 <- 0
mu2 <- 2
sigma1 <- 1
sigma2 <- .5
s1 <- sqrt(1-rho^2)*sigma1
s2 <- sqrt(1-rho^2)*sigma2
X[1,] <- c(mu1,mu2)
for(i in 2:N){
  x2 <- X[i-1,2]
  m1 <- mu1+rho*(x2-mu2)*sigma1/sigma2
  X[i,1] <- rnorm(1,m1,s1)
  x1 <- X[i,1]
  m2 <- mu2+rho*(x1-mu1)*sigma2/sigma1
  X[i,2] <- rnorm(1,m2,s2)
}
b <- burn+1
x <- X[b:N,]
colMeans(x)
cov(x)
cor(x)
plot(x,main="",cex=.5,xlab = bquote(X[1]),ylab = bquote(X[2]),ylim = range(x[,2]))



n <- 5000
burn.in <- 2500
X <- matrix(0,n,2)
mu1 <- 1
mu2 <- -1
sigma1 <- 1
sigma2 <- 2
rho <- .5
s1.c <- sqrt(1-rho^2)*sigma1
s2.c <- sqrt(1-rho^2)*sigma2
X[1,] <- c(mu1,mu2)
for(i in 2:n){
  x2 <- X[i-1,2]
  m1.c <- mu1+rho*(x2-mu2)*sigma1/sigma2
  X[i,1] <- rnorm(1,m1.c,s1.c)
  x1 <- X[i,1]
  m2.c <- mu2+rho*(x1-mu1)*sigma2/sigma1
  X[i,2] <- rnorm(1,m2.c,s2.c)
}
b <- burn.in+1
x.mcmc <- X[b:n,]
library(MASS)
MVN.kdensity <- kde2d(x.mcmc[,1],x.mcmc[,2],h=5)
plot(x.mcmc,col="blue",xlab="X1",ylab="X2")
contour(MVN.kdensity,add=TRUE)
hist(x.mcmc[,1])
library(stats)
acf(x.mcmc[,1])
index <- 1:n
plot(index,X[,1],type="l")



n <- 5000
burn.in <- 2500
X <- matrix(0,n,2)
mu1 <- 1
mu2 <- -1
sigma1 <- 1
sigma2 <- 2
rho <- .5
s1.c <- sqrt(1-rho^2)*sigma1
s2.c <- sqrt(1-rho^2)*sigma2
X[1,] <- c(mu1,mu2)
for(i in 2:n){
  x2 <- X[i-1,2]
  m1.c <- mu1+rho*(x2-mu2)*sigma1/sigma2
  X[i,1] <- rnorm(1,m1.c,s1.c)
  x1 <- X[i,1]
  m2.c <- mu2+rho*(x1-mu1)*sigma2/sigma1
  X[i,2] <- rnorm(1,m2.c,s2.c)
}
b <- burn.in+1
x.mcmc <- X[b:n,]
library(MASS)
MVN.kdensity <- kde2d(x.mcmc[,1],x.mcmc[,2],h=5)
plot(x.mcmc,col="blue",xlab="X1",ylab="X2")
contour(MVN.kdensity,add=TRUE)
hist(x.mcmc[,1])
library(stats)
acf(x.mcmc[,1])
index <- 1:n
plot(index,X[,1],type="l")



Monte-Carlo误差计算：


mcerror.batch <- function(x,batches){##batch mean批均值法
  iter <- length(x)
  batleng <- ceiling(iter/batches)
  bats <- sort(rep(seq(from=1,to=batches,by=1),batleng))
  bats <- bats[1:iter]
  batmeans <- tapply(x, bats, mean)
  mc.error <- sd(batmeans)/sqrt(batches-1)
  return(mc.error)
}



随机游走Metropolis-Hastings算法函数：


rw.Metropolis <- function(n,sigma,x0,N){
  x <- numeric(N)
  x[1] <- x0
  u <- runif(N)
  k <- 0
  for(i in 2:N){
    y <- rnorm(1,x[i-1],sigma)
    if(u[i]<=(dt(y,n)/dt(x[i-1],n)))
      x[i] <- y
    else{
      x[i] <- x[i-1]
      k <- k+1
    }
  }
  return(list(x=x,k=k))
}



随机游走Metropolis-Hastings算法影响因素（4次实验）：


##
library(tseries)
path="C:\\Users\\user\\Documents\\统计实践与高维\\统计咨询与实践\\大报告\\code"
setwd(path)
source('随机游走Metropolis.R')
source('批均值法计算Monte Carlo误差.R')
n <- 5#设定t分布自由度
N <- 10000#抽样次数为2000次
sigma <- c(0.05,0.5,4,20)
x0 <- 25#设定数据链的初值
rw1 <- rw.Metropolis(n,sigma[1],x0,N)
rw2 <- rw.Metropolis(n,sigma[2],x0,N)
rw3 <- rw.Metropolis(n,sigma[3],x0,N)
rw4 <- rw.Metropolis(n,sigma[4],x0,N)
print(c(rw1$k,rw2$k,rw3$k,rw4$k))
index <- 1:10000
y1 <- rw1$x[index]
y2 <- rw2$x[index]
y3 <- rw3$x[index]
y4 <- rw4$x[index]
plot(index,y1,type="l",xlab = bquote(sigma*"=0.05"),main = "",ylab = "x")
plot(index,y2,type="l",xlab = bquote(sigma*"=0.5"),main = "",ylab = "x")
plot(index,y3,type="l",xlab = bquote(sigma*"=4"),main = "",ylab = "x")
plot(index,y4,type="l",xlab = bquote(sigma*"=20"),main = "",ylab = "x")
mcerror.batch(y1,batches=50)
mcerror.batch(y2,batches=50)
mcerror.batch(y3,batches=50)
mcerror.batch(y4,batches=50)
acf(y1)
acf(y2)
acf(y3)
acf(y4)
##发现sigma过小，图形为随机游走，数据链10000次迭代不收敛
##但是sigma大了，虽然收敛，但拒绝次数过多




随机游走Metropolis-Hastings算法建议分布sigma影响：


path="C:\\Users\\user\\Documents\\统计实践与高维\\统计咨询与实践\\大报告\\code"
setwd(path)
library(tseries)
source('随机游走Metropolis.R')
source('批均值法计算Monte Carlo误差.R')
sigma_max <- 100##设定建议分布sigma值范围为1-100
sigma_trans <- seq(from=0.05,to=sigma_max,by=0.05)##考虑建议分布sigma值的影响
rwreject <- rep(0,length(sigma_trans))
mcerrorlist <- rep(0,length(sigma_trans))
adflist <- rep(0,length(sigma_trans))
n <- 4
N <- 2000#抽样次数为2000次
x0 <- 25#设定数据链的初值
index <- 1:2000
for (i in 1:length(sigma_trans)) {
  rw <- rw.Metropolis(n,sigma_trans[i],x0,N)
  rwreject[i] <- rw$k
  y <- rw$x[index]
  mcerrorlist[i] <- mcerror.batch(y,batches = 50)
  adflist[i] <- adf.test(y)$p.value
}
plot(sigma_trans,rwreject,type="l",xlab = "模拟的建议分布sigma值",ylab = "抽样拒绝次数")
plot(sigma_trans,mcerrorlist,type="l",xlab = "模拟的建议分布sigma值",ylab = "Monto Carlo误差")
plot(sigma_trans,adflist,type="l",xlab = "模拟的建议分布sigma值",ylab = "adf检验p值")




随机游走Metropolis-Hastings算法目标分布自由度影响：


path="C:\\Users\\user\\Documents\\统计实践与高维\\统计咨询与实践\\大报告\\code"
setwd(path)
library(tseries)
source('随机游走Metropolis.R')
source('批均值法计算Monte Carlo误差.R')
n_max <- 200##设定t分布的自由度范围为1-200
n_trans <- seq(from=1,to=n_max,by=1)##考虑t分布自由度的影响
rwreject <- rep(0,length(n_trans))
mcerrorlist <- rep(0,length(n_trans))
acflist <- rep(0,length(n_trans))
adflist <- rep(0,length(n_trans))
N <- 2000#抽样次数为2000次
sigma <- 5
x0 <- 25#设定数据链的初值
index <- 1:2000
for (i in 1:length(n_trans)) {
  rw <- rw.Metropolis(n_trans[i],sigma,x0,N)
  rwreject[i] <- rw$k
  y <- rw$x[index]
  mcerrorlist[i] <- mcerror.batch(y,batches = 50)
  acflist[i] <- acf(y)[20]
  adflist[i] <- adf.test(y)$p.value
}
plot(n_trans,rwreject,type="l",xlab = "模拟的t分布自由度",ylab = "抽样拒绝次数")
plot(n_trans,mcerrorlist,type="l",xlab = "模拟的t分布自由度",ylab = "Monto Carlo误差")
plot(n_trans,acflist,type="l",xlab = "模拟的t分布自由度",ylab = "acf检验值")
plot(n_trans,adflist,type="l",xlab = "模拟的t分布自由度",ylab = "adf检验p值")



独立抽样Metropolis-Hastings算法：


m <- 20000##样本链长度
xt <- numeric(m)
a <- 1
b <- 1##建议分布Beta(a,b)的参数
p <- 0.2##混合权重
n <- 300##样本量
mu <- c(0,5)
sigma <- c(1,1)##正态分布参数，用来形成混合分布
##生成观察值
i <- sample(1:2,size = n,replace = TRUE,prob = c(p,1-p))
x <- rnorm(n,mu[i],sigma[i])
##生成独立样本链
u <- runif(m)
y <- rbeta(m,a,b)##形成建议分布的抽样
xt[1] <- 0.5
for(i in 2:m){
  fy <- y[i]*dnorm(x,mu[1],sigma[1])+(1-y[i])*dnorm(x,mu[2],sigma[2])
  fx <- xt[i-1]*dnorm(x,mu[1],sigma[1])+(1-xt[i-1])*dnorm(x,mu[2],sigma[2])
  r <- prod(fy/fx)*(xt[i-1]^(a-1)*(1-xt[i-1])^(b-1))/(y[i]^(a-1)*(1-y[i])^(b-1))
  if(u[i]<=r)
    xt[i] <- y[i]
  else
    xt[i] <- xt[i-1]
}
plot(xt,type = "l",ylab = "p")
hist(xt[1001:m],main = "",xlab = "p",prob = TRUE)
print(mean(xt[1001:m]))



对p的参数估计研究：


m <- 20000##样本链长度
xt <- numeric(m)
a <- 1
b <- 1##建议分布Beta(a,b)的参数
p_vec <- seq(from=0.01,to=0.99,by=0.01)
p_pre <- rep(0,length(p_vec))
p_mse <- rep(0,length(p_vec))
n <- 300##样本量
mu <- c(0,5)
sigma <- c(1,1)##正态分布参数，用来形成混合分布
##生成观察值
for(j in 1:length(p_vec)){
  i <- sample(1:2,size = n,replace = TRUE,prob = c(p_vec[j],1-p_vec[j]))
  x <- rnorm(n,mu[i],sigma[i])
  ##生成独立样本链
  u <- runif(m)
  y <- rbeta(m,a,b)##形成建议分布的抽样
  xt[1] <- 0.5
  for(i in 2:m){
    fy <- y[i]*dnorm(x,mu[1],sigma[1])+(1-y[i])*dnorm(x,mu[2],sigma[2])
    fx <- xt[i-1]*dnorm(x,mu[1],sigma[1])+(1-xt[i-1])*dnorm(x,mu[2],sigma[2])
    r <- prod(fy/fx)*(xt[i-1]^(a-1)*(1-xt[i-1])^(b-1))/(y[i]^(a-1)*(1-y[i])^(b-1))
    if(u[i]<=r)
      xt[i] <- y[i]
    else
      xt[i] <- xt[i-1]
  }
  p_pre[j] <- mean(xt[1001:m])
  p_mse[j] <- (p_pre[j]-p_vec[j])^2
}
plot(p_vec,p_mse,col=2,main="不同p值估计mse结果",type="l")



两种Metropolis-Hastings算法对比：


path="C:\\Users\\user\\Documents\\统计实践与高维\\统计咨询与实践\\大报告\\code"
setwd(path)
source('批均值法计算Monte Carlo误差.R')
y_vec1 <- seq(from = 50, to = 950, by = 10)
y_vec2 <- seq(from = 50, to = 950, by = 10)
N <- 1000
iterations <- 2500
acc.problist1 <- rep(0,length(y_vec))
acc.problist2 <- rep(0,length(y_vec))
sdplist1 <- rep(0,length(y_vec))
sdplist2 <- rep(0,length(y_vec))
sdthetalist1 <- rep(0,length(y_vec))
sdthetalist2 <- rep(0,length(y_vec))
mcerrorplist1 <- rep(0,length(y_vec))
mcerrorplist2 <- rep(0,length(y_vec))
mcerrorthetalist1 <- rep(0,length(y_vec))
mcerrorthetalist2 <- rep(0,length(y_vec))
for(y in y_vec1){
  mu.theta <- 0
  s.theta <- 100
  prop.s <- 0.35
  theta <- numeric(iterations)
  current.theta <- 0
  acc.prob <- 0
  for(t in 1:iterations){
    prop.theta <- rnorm(1,current.theta,prop.s)
    loga <- ((prop.theta*y-N*log(1+exp(prop.theta)))
             -(current.theta*y-N*log(1+exp(current.theta)))
             +dnorm(prop.theta,mu.theta,s.theta,log=TRUE)
             -dnorm(current.theta,mu.theta,s.theta,log = TRUE))
    u <- runif(1)
    u <- log(u)
    if(u<loga){
      current.theta <- prop.theta
      acc.prob <- acc.prob+1
    }
    theta[t] <- current.theta
  }
  p <- exp(theta)/(1+exp(theta))
  acc.problist1[round((y-50)/10)] <- acc.prob
  sdplist1[round((y-50)/10)] <- sd(p)
  sdthetalist1[round((y-50)/10)] <- sd(theta)
  mcerrorplist1[round((y-50)/10)] <- mcerror.batch(p,batches = 50)
  mcerrorthetalist1[round((y-50)/10)] <- mcerror.batch(theta,batches = 50)
}
for(y in y_vec2){
  mu.theta <- 0
  s.theta <- 100
  prop.mu <- log(y/(N-y))
  mle.var <- 1/y+1/(N-y)
  w <- 1/(1+mle.var/s.theta^2)
  prop.s <- sqrt(mle.var*w)
  theta <- numeric(iterations)
  acc.prob <- 0
  current.theta <- 0
  for(t in 1:iterations){
    prop.theta <- rnorm(1,prop.mu,prop.s)
    loga <- ((prop.theta*y-N*log(1+exp(prop.theta)))
             -(current.theta*y-N*log(1+exp(current.theta)))
             +dnorm(prop.theta,mu.theta,s.theta,log = TRUE)
             -dnorm(current.theta,mu.theta,s.theta,log = TRUE)
             +dnorm(current.theta,prop.mu,prop.s,log = TRUE)
             -dnorm(prop.theta,prop.mu,prop.s,log = TRUE))
    u <- runif(1)
    u <- log(u)
    if(u<loga){
      current.theta <- prop.theta
      acc.prob <- acc.prob+1
    }
    theta[t] <- current.theta
  }
  p <- exp(theta)/(1+exp(theta))
  acc.problist2[round((y-50)/10)] <- acc.prob
  sdplist2[round((y-50)/10)] <- sd(p)
  sdthetalist2[round((y-50)/10)] <- sd(theta)
  mcerrorplist2[round((y-50)/10)] <- mcerror.batch(p,batches = 50)
  mcerrorthetalist2[round((y-50)/10)] <- mcerror.batch(theta,batches = 50)
}
plot(y_vec1,acc.problist1,type="l",xlab = "原假定的y值（胜场值）",ylab = "抽样接受次数",col="red")
lines(y_vec2,acc.problist2,type="l",xlab = "原假定的y值（胜场值）",ylab = "抽样接受次数",col="blue")
plot(y_vec1,sdplist1,type="l",xlab = "原假定的y值（胜场值）",ylab = "模拟胜率标准差",col="red")
lines(y_vec2,sdplist2,type="l",xlab = "原假定的y值（胜场值）",ylab = "模拟胜率标准差",col="blue")
plot(y_vec1,sdthetalist1,type="l",xlab = "原假定的y值（胜场值）",ylab = "模拟theta标准差",col="red")
lines(y_vec2,sdthetalist2,type="l",xlab = "原假定的y值（胜场值）",ylab = "模拟theta标准差",col="blue")
plot(y_vec1,mcerrorplist1,type="l",xlab = "原假定的y值（胜场值）",ylab = "胜率的MC误差",col="red")
lines(y_vec2,mcerrorplist2,type="l",xlab = "原假定的y值（胜场值）",ylab = "胜率的MC误差",col="blue")
plot(y_vec1,mcerrorthetalist1,type="l",xlab = "原假定的y值（胜场值）",ylab = "theta的MC误差",col="red")
lines(y_vec2,mcerrorthetalist2,type="l",xlab = "原假定的y值（胜场值）",ylab = "theta的MC误差",col="blue")



时间序列Makeplots函数：


MakePlots <- function(model, ask = TRUE) {
  ## Make all the plots callable by plot.bsts.
  opar <- par(ask = ask)
  on.exit(par(opar))
  plot.types <- c("state", "components", "residuals",
                  "prediction.errors", "forecast.distribution")
  for (plot.type in plot.types) {
    plot(model, plot.type,main = plot.type)
  }
  if (model$has.regression) {
    regression.plot.types <- c("coefficients", "predictors", "size")
    for (plot.type in regression.plot.types) {
      plot(model, plot.type)
    }
  }
}



SP500bsts函数：


library(bsts)
path="C:\\Users\\user\\Documents\\统计实践与高维\\统计咨询与实践\\大报告\\code"
setwd(path)
source("Makeplots函数.R")
#数据导入
data<-read.csv("D:/Rsoftware/时间序列与金融统计/非线性模型作业/data/S&P.csv")
d<-ts(data,frequency = 53,start = c(2016))
#数据处理
#figure1:导入收盘价数据
plot(d[,5])
x <- d[,5]
#figure2:转对数收益率
logd<-diff(log(d[,5]))
plot(logd,col="red",xlab="时间",ylab="对数收益率")
y_ori <- logd
y <- y_ori[1:220]
ss <- AddLocalLinearTrend(list(), y)
model <- bsts(y, state.specification = ss, niter = 500)
pred <- predict(model, horizon = 12, burn = 100)
plot(model)
plot(pred)
plot(model, "state",main = "state")
plot(model, "components",main = "components")
plot(model, "residuals",main = "residuals")
plot(model, "prediction.errors",main = "prediction errors")
plot(model, "forecast.distribution",main = "forecast distribution")
#MakePlots(model)

ss2 <- AddSemilocalLinearTrend(list(), x)
model2 <- bsts(x, state.specification = ss2, niter = 500)
pred2 <- predict(model2, horizon = 12, burn = 100)
plot(model2)
plot(pred2)
plot(model2, "state",main = "state")
plot(model2, "components",main = "components")
plot(model2, "residuals",main = "residuals")
plot(model2, "prediction.errors",main = "prediction errors")
plot(model2, "forecast.distribution",main = "forecast distribution")
#MakePlots(model2)



SP500后项预测误差比较：

library(bsts)
path="C:\\Users\\user\\Documents\\统计实践与高维\\统计咨询与实践\\大报告\\code"
setwd(path)
source("Makeplots函数.R")
#数据导入
data<-read.csv("D:/Rsoftware/时间序列与金融统计/非线性模型作业/data/S&P.csv")
d<-ts(data,frequency = 53,start = c(2016))
#数据处理
#figure1:导入收盘价数据
plot(d[,5])
x <- d[,5]
#figure2:转对数收益率
logd<-diff(log(d[,5]))
plot(logd,col="red",xlab="时间",ylab="对数收益率")
y_ori <- logd
y_range <- as.vector(seq(from = 145, to=245, by = 1))
pre_error1 <- rep(0,length(y_range))
pre_error2 <- rep(0,length(y_range))
for(i in y_range){
  y <- y_ori[1:i]
  ss <- AddLocalLinearTrend(list(), y)
  model <- bsts(y, state.specification = ss, niter = 500)
  pred <- predict(model, horizon = 12, burn = 100)
  error <- dist(rbind(pred$mean,y_ori[i+1:i+12]),method = "euclidean")/12
  pre_error1[i-144] <- error
}
pre_error1
for(i in y_range){
  y <- y_ori[1:i]
  pre <- forecast(y,12)
  error <- dist(rbind(pre$mean,y_ori[i+1:i+12]),method = "euclidean")/12
  pre_error2[i-144] <- error
}
pre_error2
plot(y_range,pre_error1,xlab="时间变动范围",ylab="horizon=12预测误差",col="red",type="l")
lines(y_range,pre_error2,xlab="时间变动范围",ylab="horizon=12预测误差",col="blue",type="l")



Google公司股票数据后项误差预测比较：


data(goog)
d<-ts(goog,frequency = 260,start = c(2007))
y_ori <- d
ss <- AddSemilocalLinearTrend(list(), d)
model <- bsts(goog, state.specification = ss, niter = 500)
pred <- predict(model, horizon = 12, burn = 100)
y_range <- as.vector(seq(from = 800, to=1000, by = 1))
pre_error1 <- rep(0,length(y_range))
pre_error2 <- rep(0,length(y_range))
for(i in y_range){
  y <- y_ori[1:i]
  ss <- AddLocalLinearTrend(list(), y)
  model <- bsts(y, state.specification = ss, niter = 500)
  pred <- predict(model, horizon = 12, burn = 100)
  error <- dist(rbind(pred$mean,y_ori[i+1:i+12]),method = "euclidean")/12
  pre_error1[i-799] <- error
}
pre_error1
for(i in y_range){
  y <- y_ori[1:i]
  pre <- forecast(y,12)
  error <- dist(rbind(pre$mean,y_ori[i+1:i+12]),method = "euclidean")/12
  pre_error2[i-799] <- error
}
pre_error2
plot(y_range,pre_error1,xlab="时间变动范围",ylab="horizon=12预测误差",col="red",type="l")
lines(y_range,pre_error2,xlab="时间变动范围",ylab="horizon=12预测误差",col="blue",type="l")



作用于季节性数据AirPassenger:


data(AirPassengers)
y_ori <- log(AirPassengers)
y <- log(AirPassengers)[1:132]
ss <- AddLocalLinearTrend(list(), y)
ss <- AddSeasonal(ss, y, nseasons = 12)
model <- bsts(y, state.specification = ss, niter = 500)
pred <- predict(model, horizon = 12, burn = 100)
plot(model)
plot(pred)
pred$mean
y_ori[133:144]